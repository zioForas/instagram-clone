"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
    "Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


type Query {
    me: User @auth
    posts: [Post] @all @guard
    post(id: Int! @eq): Post @find @guard
    suggestions: [User] @guard
    feed: [Post] @guard
    stories: [User] @guard
}

type Mutation {
  login(email: String!, password: String!): String!
  logout: String @guard              
  like(post_id: ID!): PostLike @guard
  unlike(post_id: ID!): String @guard
  follow(user_id: ID!): UserFollower @guard
  unfollow(user_id: ID!): String @guard
  addComment(post_id: ID!, comment: String!): PostComment @guard
  updateUser(
    name: String
    username: String
    bio: String
    website: String @rules(apply: ["url"])
    phone: String
    email: String @rules(apply: ["email"])
  ): User @guard
  addPost(file: Upload!, caption: String!): Post @guard 

}

"Account of a person who utilizes this application."
type User {
    id: ID!

    name: String!

    username: String!

    image: String!

    website: String!

    bio: String!

    email: String!

    phone: String!

    email_verified_at: DateTime

    created_at: DateTime!

    updated_at: DateTime!

# esto hace que los posts, seguidores y seguidos sean dinamicos y se muestre la cuenta 
    posts: [Post!]! @hasMany
    total_posts: Int! @count(relation: "posts")
    total_followers: Int! @count(relation: "followers")
    total_following: Int! @count(relation: "following")

}
# hace los componentes del post din√°micos
type Post{
  id: ID!
  user_id: ID!
  caption: String!
  image: String!
  likes: Int! @count(relation: "postLikes")
  created_time_ago:String!
  created_at:DateTime!
  updated_at:DateTime!
  user: User! @belongsTo
  comments: [PostComment!]! @hasMany
  postLikes: [PostLike!]! @hasMany

}
# likes de los posts con fecha

type PostLike {
  id: ID!
  user_id: ID!
  post_id: ID!
  created_at:DateTime!
  updated_at:DateTime!
}

# comentarios de los posts
type PostComment{
  id: ID!
  user_id: ID!
  post_id: ID!
  comment:String!
  is_liked: Int!
  created_at:DateTime!
  updated_at:DateTime!
  post: Post! @belongsTo
  user: User! @belongsTo
}

type UserFollower {
  id: ID!
  user_id: ID!
  follower_id: ID!
  created_at:DateTime!
  updated_at:DateTime!
  user: User! @belongsTo
}